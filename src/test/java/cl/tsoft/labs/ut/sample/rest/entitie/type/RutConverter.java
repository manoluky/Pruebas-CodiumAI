package cl.tsoft.labs.ut.sample.rest.entitie.type;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;


// Generated by CodiumAI

    public class RutConverter {


        // should convert a valid 'Rut' object to a string
        @Test
        public void test_convert_valid_rut_to_string() {
            // Arrange
            RutConverter converter = new RutConverter();
            Rut rut = new Rut(12345678, 'K');

            // Act
            String result = converter.convertToDatabaseColumn(rut);

            // Assert
            assertEquals("12345678-K", result);
        }

        private String convertToDatabaseColumn(Rut rut) {
            return null;
              }

        // should convert a null 'Rut' object to a null string
        @Test
        public void test_convert_null_rut_to_null_string() {
            // Arrange
            RutConverter converter = new RutConverter();
            Rut rut = null;

            // Act
            String result = converter.convertToDatabaseColumn(rut);

            // Assert
            assertNull(result);
        }

        // should convert an empty 'Rut' object to an empty string
        @Test
        public void test_convert_empty_rut_to_empty_string() {
            // Arrange
            RutConverter converter = new RutConverter();
            Rut rut = new Rut();

            // Act
            String result = converter.convertToDatabaseColumn(rut);

            // Assert
            assertEquals("", result);
        }

        // should convert a string with a valid 'Rut' format to a 'Rut' object
        @Test
        public void test_convert_valid_string_to_rut() {
            // Arrange
            RutConverter converter = new RutConverter();
            String rutString = "12345678-K";

            // Act
            Rut result = converter.convertToEntityAttribute(rutString);

            // Assert
            assertEquals(new Rut(12345678, 'K'), result);
        }

        private Rut convertToEntityAttribute(String rutString) {
            return null;
        }

        // should convert a string with a valid 'Rut' format and lowercase digit to a 'Rut' object
        @Test
        public void test_convert_valid_string_with_lowercase_digit_to_rut() {
            // Arrange
            RutConverter converter = new RutConverter();
            String rutString = "12345678-k";

            // Act
            Rut result = converter.convertToEntityAttribute(rutString);

            // Assert
            assertEquals(new Rut(12345678, 'K'), result);
        }

        // should convert a string with an invalid 'Rut' format to a null 'Rut' object
        @Test
        public void test_convert_invalid_string_to_null_rut() {
            // Arrange
            RutConverter converter = new RutConverter();
            String rutString = "12345678";

            // Act
            Rut result = converter.convertToEntityAttribute(rutString);

            // Assert
            assertNull(result);
        }

        // should convert a string with an invalid 'Rut' format and a valid number to a null 'Rut' object
        @Test
        public void test_convert_invalid_string_with_valid_number_to_null_rut() {
            // Arrange
            RutConverter converter = new RutConverter();
            String rutString = "12345678-0";

            // Act
            Rut result = converter.convertToEntityAttribute(rutString);

            // Assert
            assertNull(result);
        }

        // should convert a string with an invalid 'Rut' format and a valid digit to a null 'Rut' object
        @Test
        public void test_convert_invalid_string_with_valid_digit_to_null_rut() {
            // Arrange
            RutConverter converter = new RutConverter();
            String rutString = "1234567A-K";

            // Act
            Rut result = converter.convertToEntityAttribute(rutString);

            // Assert
            assertNull(result);
        }

        // should convert a string with an invalid 'Rut' format and an invalid number to a null 'Rut' object
        @Test
        public void test_convert_invalid_string_with_invalid_number_to_null_rut() {
            // Arrange
            RutConverter converter = new RutConverter();
            String rutString = "123456789-0";

            // Act
            Rut result = converter.convertToEntityAttribute(rutString);

            // Assert
            assertNull(result);
        }

        // should convert a string with an invalid 'Rut' format and an invalid digit to a null 'Rut' object
        @Test
        public void test_convert_invalid_string_with_invalid_digit_to_null_rut() {
            // Arrange
            RutConverter converter = new RutConverter();
            String rutString = "12345678-!";

            // Act
            Rut result = converter.convertToEntityAttribute(rutString);

            // Assert
            assertNull(result);
        }

    }