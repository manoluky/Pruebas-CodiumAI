package cl.tsoft.labs.ut.sample.rest.entitie.type;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;



import cl.tsoft.labs.ut.sample.rest.entitie.converter.RutConverter;

class RutTest {


// Generated by CodiumAI

    // Should return a string representation of the given Rut object
    @Test
    public void test_return_string_representation() {
        RutConverter converter = new RutConverter();
        Rut rut = new Rut(12345678, 'K');
        String result = converter.convertToDatabaseColumn(rut);
        assertEquals("12345678-K", result);
    }

    // Should return null if the given Rut object has number <= 0
    @Test
    public void test_return_null_if_number_less_than_or_equal_to_zero() {
        RutConverter converter = new RutConverter();
        Rut rut = new Rut(0, 'K');
        String result = converter.convertToDatabaseColumn(rut);
        assertNull(result);
    }

    @Test
    public void test_convertValidRutToStringRepresentation() {
        // Arrange
        RutConverter converter = new RutConverter();
        Rut rut = new Rut(12345678, 'K');

        // Act
        String result = converter.convertToDatabaseColumn(rut);

        // Assert
        assertEquals("12345678-K", result);
    }
       // should return null when converting a 'Rut' object with a number less than or equal to zero
       @Test
       public void test_return_null_when_converting_rut_with_number_less_than_or_equal_to_zero() {
           // Arrange
           RutConverter converter = new RutConverter();
           Rut rut = new Rut(0, 'K');
           // Act
           String result = converter.convertToDatabaseColumn(rut);
           // Assert
           assertNull(result);
       }
       // should return null when converting a null string
       @Test
       public void test_return_null_when_converting_null_string() {
           RutConverter converter = new RutConverter();
           String result = String.valueOf(converter.convertToEntityAttribute(null));
           assertNull(result);
       }
       // should convert a valid string representation to a 'Rut' object
       @Test
       public void test_convert_valid_string_representation_to_rut_object() {
           // Arrange
           RutConverter converter = new RutConverter();
           String validRutString = "12345678-K";
           // Act
           Rut result = converter.convertToEntityAttribute(validRutString);
           // Assert
           assertNotNull(result);
           assertEquals(12345678, result.getNumber());
           assertEquals('K', result.getDigit());
       }
       // should throw an exception when converting an invalid string representation
       @Test
       public void test_throw_exception_when_converting_invalid_string_representation() {
           RutConverter converter = new RutConverter();
           assertThrows(IllegalArgumentException.class, () -> converter.convertToEntityAttribute("12345678-K"));
       }
       // should return null when converting a null 'Rut' object
       @Test
       public void test_return_null_when_converting_null_rut_object() {
           RutConverter converter = new RutConverter();
           String result = converter.convertToDatabaseColumn(null);
           assertNull(result);
       }
       // should handle an empty string representation
       @Test
       public void test_handle_empty_string_representation() {
           // Arrange
           RutConverter converter = new RutConverter();
           Rut rut = new Rut(0, 'K');
           // Act
           String result = converter.convertToDatabaseColumn(rut);
           // Assert
           assertNull(result);
       }
       // should handle leading and trailing whitespaces in the string representation
       @Test
       public void test_handle_leading_and_trailing_whitespaces() {
           RutConverter converter = new RutConverter();
           Rut rut = new Rut(12345678, 'K');
           String result = converter.convertToDatabaseColumn(rut);
           assertEquals("12345678-K", result);
           rut = new Rut(12345678, 'K');
           result = converter.convertToDatabaseColumn(rut);
           assertEquals(" 12345678-K ", result);
           rut = new Rut(12345678, 'K');
           result = converter.convertToDatabaseColumn(rut);
           assertEquals("  12345678-K  ", result);
       }
       // should handle a 'Rut' object with a number greater than 99999999
       @Test
       public void test_handle_rut_object_with_large_number() {
           // Arrange
           RutConverter converter = new RutConverter();
           Rut rut = new Rut(100000000, 'K');
           // Act
           String result = converter.convertToDatabaseColumn(rut);
           // Assert
           assertNull(result);
       }
       // should handle a 'Rut' object with a digit other than 'K' or a digit character
       @Test
       public void test_handle_rut_with_invalid_digit() {
           // Arrange
           RutConverter converter = new RutConverter();
           Rut rut = new Rut(12345678, 'A');
           // Act
           String result = converter.convertToDatabaseColumn(rut);
           // Assert
           assertNull(result);
       }
       // should handle a 'Rut' object with a number less than zero
       @Test
       public void test_handle_rut_with_negative_number() {
           // Arrange
           RutConverter converter = new RutConverter();
           Rut rut = new Rut(-12345678, 'K');
           // Act
           String result = converter.convertToDatabaseColumn(rut);
           // Assert
           assertNull(result);
       }
       // should handle different cases for the digit in the string representation
       @Test
       public void test_handle_different_cases_for_digit() {
           RutConverter converter = new RutConverter();
           // Test case 1: Lowercase 'k'
           Rut rut1 = new Rut(12345678, 'k');
           String result1 = converter.convertToDatabaseColumn(rut1);
           assertEquals("12345678-K", result1);
           // Test case 2: Uppercase 'K'
           Rut rut2 = new Rut(87654321, 'K');
           String result2 = converter.convertToDatabaseColumn(rut2);
           assertEquals("87654321-K", result2);
           // Test case 3: Digit is a number
           Rut rut3 = new Rut(98765432, '5');
           String result3 = converter.convertToDatabaseColumn(rut3);
           assertEquals("98765432-5", result3);
       }

}